// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Punk.SP500StockModels;

#nullable disable

namespace Punk.Migrations
{
    [DbContext(typeof(SP500Context))]
    partial class SP500ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("Punk.SP500StockModels.FinancialDate", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Date");

                    b.ToTable("FinancialDate", (string)null);
                });

            modelBuilder.Entity("Punk.SP500StockModels.Price", b =>
                {
                    b.Property<double>("AdjClose")
                        .HasColumnType("REAL");

                    b.Property<double>("Close")
                        .HasColumnType("REAL");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<double>("High")
                        .HasColumnType("REAL");

                    b.Property<double>("Low")
                        .HasColumnType("REAL");

                    b.Property<double>("Open")
                        .HasColumnType("REAL");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Volume")
                        .HasColumnType("INTEGER");

                    b.HasIndex(new[] { "Date" }, "IX_Price_Date");

                    b.HasIndex(new[] { "Ticker", "Date" }, "IX_Price_Ticker_Date")
                        .IsUnique();

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("Punk.SP500StockModels.SectorComponent", b =>
                {
                    b.Property<string>("SectorSymbolId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StockTicker")
                        .HasColumnType("TEXT");

                    b.HasKey("SectorSymbolId", "StockTicker");

                    b.HasIndex("StockTicker");

                    b.HasIndex("SectorSymbolId", "StockTicker")
                        .IsUnique();

                    b.ToTable("SectorComponents");
                });

            modelBuilder.Entity("Punk.SP500StockModels.SectorSymbol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SectorSymbols");
                });

            modelBuilder.Entity("Punk.SP500StockModels.Stock", b =>
                {
                    b.Property<string>("Ticker")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.HasKey("Ticker");

                    b.ToTable("Stock", (string)null);
                });

            modelBuilder.Entity("Punk.SP500StockModels.Price", b =>
                {
                    b.HasOne("Punk.SP500StockModels.FinancialDate", "DateNavigation")
                        .WithMany()
                        .HasForeignKey("Date")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Punk.SP500StockModels.Stock", "TickerNavigation")
                        .WithMany()
                        .HasForeignKey("Ticker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DateNavigation");

                    b.Navigation("TickerNavigation");
                });

            modelBuilder.Entity("Punk.SP500StockModels.SectorComponent", b =>
                {
                    b.HasOne("Punk.SP500StockModels.SectorSymbol", null)
                        .WithMany("Components")
                        .HasForeignKey("SectorSymbolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Punk.SP500StockModels.Stock", null)
                        .WithMany("Components")
                        .HasForeignKey("StockTicker")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Punk.SP500StockModels.SectorSymbol", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Punk.SP500StockModels.Stock", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
